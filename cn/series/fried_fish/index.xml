<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fried_Fish on Epistemophilia</title>
    <link>https://DonnotPanic.github.io/Epistemophilia/cn/series/fried_fish/</link>
    <description>Recent content in Fried_Fish on Epistemophilia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 29 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://DonnotPanic.github.io/Epistemophilia/cn/series/fried_fish/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于鱼干标签的说明</title>
      <link>https://DonnotPanic.github.io/Epistemophilia/cn/posts/about_fried_fish/</link>
      <pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://DonnotPanic.github.io/Epistemophilia/cn/posts/about_fried_fish/</guid>
      <description>标签：鱼干
 关于这个系列 这个系列的文章都是我平时没事随便打打的，未经校验，满是笔误，主要是打了好玩，大家可以当作我的笔记或者个人草稿。
为什么叫鱼干 正如其名，内容都是些过时的东西，只是我的个人兴趣。</description>
    </item>
    
    <item>
      <title>Warshall算法简述</title>
      <link>https://DonnotPanic.github.io/Epistemophilia/cn/posts/floyd-warshall-algorithm/</link>
      <pubDate>Thu, 11 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://DonnotPanic.github.io/Epistemophilia/cn/posts/floyd-warshall-algorithm/</guid>
      <description>标签：鱼干
虽然Warshall可以在边为负值的加权图中求最短路，但是图中不能有权重为负的圈。
使用Warshall算法会求出所有顶点间的最短路。
Warshall同样适用于求关系的传递闭包和找到顶点间的最大路径。
 书中提到的Floyd-Warshall是用于求关系$R$的传递闭包
那么我们先从书上的例子开始吧
传递闭包 首先是传递闭包的定义，这个书上有，简单说明一下
给定集合$X$上二元关系集合$R$，其传递闭包是在包含$R$的$X$上的最小的传递关系
Warshall算法会遍历所有顶点，对于其中任意顶点$k$以前的$1～k$个点
此时传递闭包上的关系分两种情况
 无需经过顶点$k$原本就存在的关系（包括原本在$R$中就有的1~$k$-1上的关系和在之前借助1~$k$-1得到的新关系）
 经过顶点$k$作为中转得到的新关系
  假定函数relation(i,j,k)返回是否存在从顶点$i$到顶点$j$的关系，那么
relation(i, j, k) = relation (i, j, k-1) || ( relation(i, k, k-1) &amp;amp;&amp;amp; relation(k, j, k-1) )
//bool W[n][n]是集合X上的关系矩阵W bool R[n][n] // R是W的传递闭包 for (int i = 0; i &amp;lt; n; ++i){ //将W复制到R  for (int j = 0; j &amp;lt; n; ++j){ R[i][j] = W[i][j]; } } for (int k = 0; k &amp;lt; n; ++k){ for (int i = 0; i &amp;lt; n; ++i){ for (int j = 0; j &amp;lt; n; ++j){ R[i][j] = R[i][j] || (R[i][k] &amp;amp;&amp;amp; R[k][j]; } } }  考虑一下一个共$V$个顶点的图上至多有$V^2$条边那么只需要最多经历$V^3$（遍历每一个点并遍历与它之前的$V^2$个关系）次比较就能够遍历所有可能的组合了，所以Warshall算法复杂度是$\Theta (|V|^3)$。</description>
    </item>
    
    <item>
      <title>五分钟学会快速数论变换</title>
      <link>https://DonnotPanic.github.io/Epistemophilia/cn/posts/ntt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://DonnotPanic.github.io/Epistemophilia/cn/posts/ntt/</guid>
      <description>标签：鱼干
注，本文章是18年的旧文，是我刚学C++时所写，因此代码较多
 前置: 快速幂取模 快速计算$\ a^b (mod\ m)$ 原理: 取模运算的结合率 $x*y(mod\ m)\ =\ x(mod\ m)*y(mod\ m )$
快速算法: b为偶数时，可将$a^b$拆分成$a^\frac{b}2*a^\frac{b}2$分别取模，将复杂度降低为$O(\log_{2}N) $
代码(C++):
int quick_mod (int a, int b, int m) { int ans = 1; a %= m; while (b) { if (b &amp;amp; 1) { ans = ans * a % m; b--; } b &amp;gt;&amp;gt;= 1; a = a * a % m; } return ans; }  正题 我们都知道朴素卷积算法：</description>
    </item>
    
  </channel>
</rss>